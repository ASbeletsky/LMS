@using System.Globalization;
@using LMS.Dto;
@model TestTemplateDTO
@{
    var types = ((IEnumerable<SelectListItem>)ViewData["AvailableTypes"]);
    var categories = ((IEnumerable<SelectListItem>)ViewData["AvailableCategories"]);
}

<div asp-validation-summary="ModelOnly" class="text-danger"></div>
<input asp-for="Id" type="hidden" />
<div class="row">
    <div class="form-group col-12 col-md-6">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" type="text" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="form-group col-12 col-md-6">
        <label asp-for="Duration" class="control-label"></label>
        <br />
        <div class="form-group">
            <div class="input-group date" id="durationPicker" data-target-input="nearest">
                <input type="text" class="form-control datetimepicker-input" data-target="#durationPicker" />
                <input required hidden id="templateDuration" asp-for="Duration" type="text" data-default="@Model.Duration.ToString()" />
                <div class="input-group-append" data-target="#durationPicker" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-clock-o"></i></div>
                </div>
            </div>
        </div>
        <span asp-validation-for="Duration" class="text-danger"></span>
    </div>
</div>
<div class="form-group">
    <label asp-for="Description" class="control-label"></label>
    <textarea asp-for="Description" class="form-control"></textarea>
    <span asp-validation-for="Description" class="text-danger"></span>
</div>
<br />
<div id="levels">
    <h4>
        Levels
        <input type="submit" formnovalidate formaction="@Url.Action("NewLevel", "TestTemplate")" class="btn pull-right" value="Add" />
    </h4>
    <hr />
    <div id="levelsAccordion">
        @for (var index = 0; index < Model.Levels.Count; index++)
        {
            <div class="level card" data-index="@index">
                <div class="card-header" id="@("levelHeader" + index)">
                    <h5 class="mb-0">
                        <a class="btn" data-toggle="collapse" href="@("#collapsableLevel" + index)" aria-expanded="true" aria-controls="@("levelHeader" + index)">
                            Level #@(index + 1)
                        </a>
                        @if (Model.Levels.Count > 1)
                        {
                            <input class="btn pull-right level-remove" onclick="testTemplate.removeLevel($(this).closest('.level'))" type="button" value="Remove" />
                        }
                    </h5>
                </div>

                <div id="@("collapsableLevel" + index)" class="collapse @(index == 0 ? "show" : "")" aria-labelledby="@("levelHeader" + index)" data-parent="#levelsAccordion">
                    <div class="p-3">
                        <input asp-for="Levels[index].Id" type="hidden" />
                        <div class="row">
                            <div class="form-group col-12 col-md-6">
                                <label asp-for="Levels[index].ValidTaskCount" class="control-label"></label>
                                <br />
                                <input asp-for="Levels[index].ValidTaskCount" class="form-control" type="text" readonly />
                            </div>
                            <div class="form-group col-12 col-md-6">
                                <label asp-for="Levels[index].ScorePerTask" class="control-label"></label>
                                <br />
                                <input value="@string.Format(CultureInfo.InvariantCulture, "{0:0.##}", Model.Levels[index].ScorePerTask)" name="@($"Levels[{index}].ScorePerTask")" class="form-control" type="text" readonly />
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-12 col-md-6">
                                <label asp-for="Levels[index].MaxScore" class="control-label"></label>
                                <label class="level-max-score">@Model.Levels[index].MaxScore</label>
                                <label>/ @TestTemplateDTO.MaxLevelScore</label>
                                <br />
                                <input onchange="testTemplate.updateScorePerTask($(this).closest('.level'))" style="width: 100%" asp-for="Levels[index].MaxScore" data-slider-value="@Model.Levels[index].MaxScore" class="form-control form-control-range" type="text" data-provide="slider" data-slider-min="1" data-slider-max="@TestTemplateDTO.MaxLevelScore" />
                            </div>
                            <div class="form-group col-12 col-md-6">
                                <label asp-for="Levels[index].TasksCount" class="control-label"></label>
                                <label class="level-tasks-count">@Model.Levels[index].TasksCount</label>
                                <label>/ @TestTemplateDTO.MaxTaskPerLevelCount</label>
                                <br />
                                <input onchange="testTemplate.updateScorePerTask($(this).closest('.level'))" style="width: 100%" asp-for="Levels[index].TasksCount" data-slider-value="@Model.Levels[index].TasksCount" class="form-control form-control-range" type="text" data-provide="slider" data-slider-min="1" data-slider-max="@TestTemplateDTO.MaxTaskPerLevelCount" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="Levels[index].Filter.ComplexityRange" class="control-label"></label>
                            <label class="level-complexity">
                                @Model.Levels[index].Filter.MinComplexity-@Model.Levels[index].Filter.MaxComplexity
                            </label>
                            <label>/ @TaskDTO.MaxComplexity</label>
                            <br />
                            <input onchange="testTemplate.complexityChanged($(this).closest('.level'))" style="width: 100%" asp-for="Levels[index].Filter.ComplexityRange" class="form-control" type="text" data-provide="slider" data-slider-value="[@Model.Levels[index].Filter.ComplexityRange]" data-slider-min="@TaskDTO.MinComplexity" data-slider-max="@TaskDTO.MaxComplexity" data-slider-step="1" />
                        </div>
                        <div class="row">
                            <div class="form-group col-12 col-md-6">
                                <label asp-for="Levels[index].Filter.CategoryIds" class="control-label"></label>
                                <select required onchange="testTemplate.refreshLevel($(this).closest('.level'))" multiple asp-for="Levels[index].Filter.CategoryIds" asp-items="@categories" data-live-search="true" class="form-control selectpicker"></select>
                                <span asp-validation-for="Levels[index].Filter.CategoryIds" class="text-danger"></span>
                            </div>
                            <div class="form-group col-12 col-md-6">
                                <label asp-for="Levels[index].Filter.TaskTypeIds" class="control-label"></label>
                                <select required onchange="testTemplate.refreshLevel($(this).closest('.level'))" multiple asp-for="Levels[index].Filter.TaskTypeIds" asp-items="@types" class="form-control selectpicker"></select>
                                <span asp-validation-for="Levels[index].Filter.TaskTypeIds" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="Levels[index].Description" class="control-label"></label>
                            <textarea asp-for="Levels[index].Description" class="form-control"></textarea>
                            <span asp-validation-for="Levels[index].Description" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />
<span id="maxScoreInvalid" class="text-danger"></span>
<br />
<div class="form-group">
    <input type="submit" value="Save" class="btn btn-default" />
</div>
<script>
    window.addEventListener("load", function () {
        var duration = $("#templateDuration").data("default");
        testTemplate.configureDurationPicker(duration);
    });
</script>