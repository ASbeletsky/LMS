@using System.Globalization;
@using LMS.Dto;
@model TestVariantDTO
@{
    var templates = ((IEnumerable<SelectListItem>)ViewData["Templates"]);
}

<div asp-validation-summary="ModelOnly" class="text-danger"></div>
<input asp-for="Id" type="hidden" />
<div class="form-group">
    <label asp-for="Title" class="control-label"></label>
    <input asp-for="Title" class="form-control" type="text" />
    <span asp-validation-for="Title" class="text-danger"></span>
</div>
<div class="form-group">
    <label asp-for="TestTemplateId" class="control-label"></label>
    <br />
    <select onchange="selectTemplate(this)" required asp-for="TestTemplateId" asp-items="templates" data-live-search="true" class="form-control selectpicker"></select>
    <span asp-validation-for="TestTemplateId" class="text-danger"></span>
</div>
<br />
<div id="levels">
    <h4>
        Levels
    </h4>
    <hr />
    <div id="levelsAccordion">
        @for (var index = 0; index < Model.Levels.Count; index++)
        {
            <div class="level card" data-index="@index">
                <div class="card-header" id="@("levelHeader" + index)">
                    <h5 class="mb-0">
                        <a class="btn" data-toggle="collapse" href="@("#collapsableLevel" + index)" aria-expanded="true" aria-controls="@("levelHeader" + index)">
                            @if (Model.Levels[index].TemplateDeleted)
                            {
                                <span class="badge badge-dark">Deleted</span>
                            }
                            else if (Model.Levels[index].TemplateModified)
                            {
                                <span class="badge badge-warning">Modified</span>
                            }
                            Level #@(index + 1)
                        </a>
                    </h5>
                </div>

                <div id="@("collapsableLevel" + index)" class="collapse @(index == 0 ? "show" : "")" aria-labelledby="@("levelHeader" + index)" data-parent="#levelsAccordion">
                    <div class="p-3">
                        <input asp-for="Levels[index].Id" type="hidden" />
                        <input asp-for="Levels[index].TestTemplateLevelId" type="hidden" />
                        <div class="form-group">
                            <label asp-for="Levels[index].Description" class="control-label"></label>
                            <br />
                            <textarea required asp-for="Levels[index].Description"></textarea>
                            <span asp-validation-for="Levels[index].Description" class="text-danger"></span>
                        </div>
                        <table class="table">
                            @foreach (var task in Model.Levels[index].AvailableTasks)
                            {
                                <tr>
                                    <td>
                                        <input onchange="toggleTask(@index, @task.Id)" type="checkbox" class="form-check-input position-static" />
                                    </td>
                                    <td>
                                        @task.Type.Title
                                    </td>
                                    <td>
                                        @task.Category.Title
                                    </td>
                                    <td>
                                        @task.Complexity
                                    </td>
                                    <td>
                                        @task.Content
                                    </td>
                                </tr>

                            }
                        </table>
                        <select required id="tasks_@index" asp-for="Levels[index].TaskIds" class="d-none">
                            <option value="0">blank</option>
                            @foreach (var taskId in Model.Levels[index].TaskIds)
                            {
                                <option selected value="@taskId"></option>
                            }
                        </select>
                        <span asp-validation-for="Levels[index].TaskIds" class="text-danger"></span>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br />
<div class="form-group">
    <input type="submit" value="Save" class="btn btn-default" />
</div>

<script>
    function toggleTask(level, id) {
        var select = $("select#tasks_" + level);
        var selected = select.find("option[value=" + id + "]:selected");
        if (selected.length > 0) {
            selected.remove();
        }
        else {
            select.append("<option selected value=" + id + "></option>");
        }
    }
    function selectTemplate(select) {
        var templateId = parseInt($(select).find(":selected").attr("value"));
        if (templateId > 0) {
            location.href = buildUrlWithParam(location.href, 'templateId', templateId);
        }
    }
    function buildUrlWithParam(url, param, value) {
        var hash = {};
        var parser = document.createElement('a');

        parser.href = url;

        var parameters = parser.search.split(/\?|&/);

        for (var i = 0; i < parameters.length; i++) {
            if (!parameters[i])
                continue;

            var ary = parameters[i].split('=');
            hash[ary[0]] = ary[1];
        }

        hash[param] = value;

        var list = [];
        Object.keys(hash).forEach(function (key) {
            list.push(key + '=' + hash[key]);
        });

        parser.search = '?' + list.join('&');
        return parser.href;
    }
</script>